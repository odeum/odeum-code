// Generated automatically by nearley
// http://github.com/Hardmath123/nearley
(function () {
function id(x) {return x[0]; }

  class Atom {
    constructor(name) { this.name = name; }
    toJSON(){ return this.name; }
  }
  class Juxt {
    constructor(left, right) { this.left = left; this.right = right; }
    toJSON(){ return [this.left.toJSON(), this.right.toJSON()]; }
  }
var grammar = {
    Lexer: undefined,
    ParserRules: [
    {"name": "_$ebnf$1", "symbols": []},
    {"name": "_$ebnf$1", "symbols": ["_$ebnf$1", "wschar"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "_", "symbols": ["_$ebnf$1"], "postprocess": function(d) {return null;}},
    {"name": "__$ebnf$1", "symbols": ["wschar"]},
    {"name": "__$ebnf$1", "symbols": ["__$ebnf$1", "wschar"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "__", "symbols": ["__$ebnf$1"], "postprocess": function(d) {return null;}},
    {"name": "wschar", "symbols": [/[ \t\n\v\f]/], "postprocess": id},
    {"name": "MAIN", "symbols": ["_", "TUPLE", "_"], "postprocess": d => d[1]},
    {"name": "TUPLE", "symbols": [{"literal":"("}, "_", "PAIR_RIGHT", "_", {"literal":")"}], "postprocess": d => d[2]},
    {"name": "PAIR_RIGHT", "symbols": ["PAIR_LEFT", "_", {"literal":","}, "_", "PAIR_RIGHT"], "postprocess": d => new Juxt(d[0], d[4])},
    {"name": "PAIR_RIGHT", "symbols": ["PAIR_LEFT"], "postprocess": d => d[0]},
    {"name": "PAIR_LEFT", "symbols": ["PAIR_LEFT", "__", "PAIR_LEFT"], "postprocess": d => new Juxt(d[0], d[2])},
    {"name": "PAIR_LEFT", "symbols": ["TUPLE"], "postprocess": d => d[0]},
    {"name": "PAIR_LEFT", "symbols": ["ATOM"], "postprocess": d => d[0]},
    {"name": "ATOM$ebnf$1", "symbols": [/[^\s()\n,]/]},
    {"name": "ATOM$ebnf$1", "symbols": ["ATOM$ebnf$1", /[^\s()\n,]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "ATOM", "symbols": ["ATOM$ebnf$1"], "postprocess": d => new Atom(d[0].join(''))}
]
  , ParserStart: "MAIN"
}
if (typeof module !== 'undefined'&& typeof module.exports !== 'undefined') {
   module.exports = grammar;
} else {
   window.grammar = grammar;
}
})();
